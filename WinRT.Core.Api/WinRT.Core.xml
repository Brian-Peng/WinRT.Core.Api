<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinRT.Core.Api</name>
    </assembly>
    <members>
        <member name="M:WinRT.Core.Api.AOP.AOPbase.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP的拦截方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:WinRT.Core.Api.AOP.AOPbase.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:WinRT.Core.Api.AOP.AOPbase.GetArgumentValue(System.Object)">
            <summary>
            object 转 string
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:WinRT.Core.Api.AOP.CacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:WinRT.Core.Api.AOP.LogAOP">
            <summary>
              1、继承接口IInterceptor
              2、实例化接口IINterceptor的唯一方法Intercept
              3、void Proceed(); 表示执行当前的方法
              4、执行后，输出到日志文件。
              原理是采用动态代理，依赖注入注入的服务，我们动态代理就是要代理这些服务,在获取到这些服务之后，就可以控制这些服务了（代理就是控制服务）
            </summary>
        </member>
        <member name="M:WinRT.Core.Api.AOP.LogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:WinRT.Core.Api.AutoMapper.AutoMapperConfig">
            <summary>
            静态全局 AutoMapper 配置文件
            </summary>
        </member>
        <member name="T:WinRT.Core.Api.AutoMapper.AutoMapperSetup">
            <summary>
            Automapper 启动服务
            </summary>
        </member>
        <member name="T:WinRT.Core.Api.AutoMapper.CustomProfile">
            <summary>
            services.AddAutoMapper是会自动找到所有继承了Profile的类然后进行配置，如果不想一个一个的配置，可以用接口的形式，批量导入
            </summary>
        </member>
        <member name="M:WinRT.Core.Api.AutoMapper.CustomProfile.#ctor">
            <summary>
            配置构造函数，用来创建关系映射
            </summary>
        </member>
        <member name="F:WinRT.Core.Api.Controllers.BlogController._httpContextAccessor">
            <summary>
            IHttp上下文访问器接口，提供对当前HttpContext的访问
            </summary>
        </member>
        <member name="F:WinRT.Core.Api.Controllers.ValuesController._httpContextAccessor">
            <summary>
            IHttp上下文访问器接口，提供对当前HttpContext的访问
            </summary>
        </member>
        <member name="M:WinRT.Core.Api.Controllers.ValuesController.Get">
            <summary>
             这个数据库有配置权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinRT.Core.Api.Controllers.ValuesController.Get1">
            <summary>
             这个数据库没有配置权限
            </summary>
            <returns></returns>
        </member>
        <member name="T:WinRT.Core.Api.Extensions.IpPolicyRateLimitSetup">
            <summary>
            IPLimit限流 启动服务
            </summary>
        </member>
        <member name="T:WinRT.Core.Api.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常过滤器
            </summary>
        </member>
        <member name="M:WinRT.Core.Api.Filter.GlobalExceptionsFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
             在一个动作引发System.Exception之后调用
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:WinRT.Core.Api.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:WinRT.Core.Api.Filter.GlobalExceptionsFilter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:WinRT.Core.Api.Filter.GlobalExceptionsFilter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:WinRT.Core.Authorizations.Policys.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:WinRT.Core.Authorizations.Policys.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],WinRT.Core.Authorizations.Policys.PermissionRequirement)">
             <summary>
             获取基于JWT的Token
             </summary>
             <param name="claims">需要在登陆的时候配置,”Claim 是对被验证主体特征的一种表述，比如：登录用户名是...，email是...，用户Id是...，其中的“登录用户名”，“email”，“用户Id”就是ClaimType。
            </param>
             <param name="permissionRequirement">在startup中定义的参数</param>
             <returns></returns>
        </member>
        <member name="T:WinRT.Core.Authorizations.Policys.PermissionHandler">
            <summary>
            权限授权处理器 继承AuthorizationHandler ，并且需要一个权限必要参数
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionHandler._roleModulePermissionServices">
            <summary>
            services 层注入
            </summary>
        </member>
        <member name="F:WinRT.Core.Authorizations.Policys.PermissionHandler._httpContextAccessor">
            <summary>
            IHttp上下文访问器接口，提供对当前HttpContext的访问
            </summary>
        </member>
        <member name="M:WinRT.Core.Authorizations.Policys.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,WinRT.Core.IServices.IRoleModulePermissionServices,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="T:WinRT.Core.Authorizations.Policys.PermissionItem">
            <summary>
            用户或角色或其他凭据实体
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:WinRT.Core.Authorizations.Policys.PermissionRequirement">
            <summary>
            必要参数类，存放的都是 Jwt Token 的全部信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.Permissions">
            <summary>
            用户权限集合
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:WinRT.Core.Authorizations.Policys.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:WinRT.Core.Authorizations.Policys.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{WinRT.Core.Authorizations.Policys.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:WinRT.Core.Controllers.V1.WeatherForecastController">
            <summary>
            天气预报接口
            </summary>
        </member>
        <member name="M:WinRT.Core.Controllers.V1.WeatherForecastController.Get">
            <summary>
             获取天气
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinRT.Core.Controllers.V2.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
             获取token令牌
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="T:WinRT.Core.Controllers.V2.WeatherForecastController">
            <summary>
            天气预报接口
            </summary>
        </member>
        <member name="M:WinRT.Core.Controllers.V2.WeatherForecastController.Get">
            <summary>
             获取天气
            </summary>
            <returns></returns>
        </member>
        <member name="T:WinRT.Core.Extensions.SwaggerSetup">
            <summary>
            Swagger 启动服务
            </summary>
        </member>
        <member name="T:WinRT.Core.Extensions.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:WinRT.Core.Extensions.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:WinRT.Core.Extensions.CustomApiVersion.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="F:WinRT.Core.Extensions.CustomApiVersion.ApiVersions.V2">
            <summary>
            V2 版本
            </summary>
        </member>
        <member name="T:WinRT.Core.Helper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:WinRT.Core.Helper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:WinRT.Core.Helper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:WinRT.Core.Helper.CustomRouteAttribute.#ctor(WinRT.Core.Extensions.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
        <member name="T:WinRT.Core.Helper.AppSecretConfig">
            <summary>
            自动读取项目配置文件 appsettings.json 。
            </summary>
        </member>
        <member name="T:WinRT.Core.Helper.Appsettings">
            <summary>
            appsettings.json操作类
            </summary>
        </member>
        <member name="M:WinRT.Core.Helper.Appsettings.app(System.String[])">
            <summary>
            封装要操作的字符
            </summary>
            <param name="sections">节点配置</param>
            <returns></returns>
        </member>
        <member name="M:WinRT.Core.Helper.Appsettings.app``1(System.String[])">
            <summary>
            递归获取配置信息数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sections"></param>
            <returns></returns>
        </member>
        <member name="M:WinRT.Core.Helper.JwtHelper.IssueJwt(WinRT.Core.Helper.JwtHelper.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="T:WinRT.Core.Helper.JwtHelper.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:WinRT.Core.Helper.JwtHelper.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:WinRT.Core.Helper.JwtHelper.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:WinRT.Core.Helper.JwtHelper.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:WinRT.Core.Program">
            <summary>
            这个Program是程序的入口, 看起来很眼熟, 是因为asp.net core application实际就是控制台程序(console application).
            </summary>
        </member>
        <member name="M:WinRT.Core.Program.Main(System.String[])">
            <summary>
             Main方法里面的内容主要是用来配置和运行程序的。
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:WinRT.Core.Startup.Configuration">
            <summary>
             用来操作appsettings.json的接口
            </summary>
        </member>
    </members>
</doc>
